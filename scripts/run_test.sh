#!/bin/bash

# Check if the required parameters are provided
if [ $# -ne 6 ]; then
    echo "Usage: $0 <cca> <predelay> <postdelay> <bandwidth> <buffer_size> <url>"
    exit 1
fi

# +----------------------------------------------+
# | Script to run simulation and process results |
# +----------------------------------------------+

# Assign input parameters to meaningful variable names
cca=$1
predelay=$2
postdelay=$3
bandwidth=$4
buffer_size=$5
url=$6

# Do you want to delete the original .pcap file after conversion?
delete_pcap_after_conversion=True

# Do you want to disable TCP SACK?
disable_SACK=False

# Set Buffer AQM (Active Queue Management) type
aqm="droptail"

# Calculate Buffer Delay Product (BDP) in bytes
bdp=$(((predelay + postdelay) * bandwidth * buffer_size / 4))

# Set output directory for measurement results
output_dir="../measurements"

# The dump file is generated by the simulation
pcap_file="$output_dir/test.pcap"

# Define trace file location
trace_file="$output_dir/bw.trace"

# Create output directory if it doesn't exist
if [ ! -d "$output_dir" ]; then
    mkdir -p "$output_dir"
    echo "[run_test.sh] Folder '$output_dir' created."
else
    echo "[run_test.sh] Folder '$output_dir' already exists."
fi

# Kill any existing iperf, iperf3, tcpdump, and mm-delay processes
killall iperf iperf3 tcpdump mm-delay mm-link 2>/dev/null

# Print parameters for debugging
echo "[run_test.sh] Congestion Control Algorithm: $cca"
echo "[run_test.sh] Predelay: $predelay ms"
echo "[run_test.sh] Postdelay: $postdelay ms"
echo "[run_test.sh] Bandwidth: $bandwidth kbps"
echo "[run_test.sh] Buffer Size (1 BDP): $bdp bytes"
echo "[run_test.sh] Active Queue Management: $aqm"

# +-------------------------------------+
# | Run the simulation and capture data |
# +-------------------------------------+

# Disable TCP SACK if the parameter is True
if [ "$disable_SACK" == "True" ]; then
    sudo sh -c "echo '0' > /proc/sys/net/ipv4/tcp_sack"
fi

# Create or clear the bandwidth trace file
rm -f "$trace_file"
touch "$trace_file"

# Generate bandwidth trace entries
for ((i = 1; i <= $(($bandwidth / 12)); i++)); do
    echo $(((i * 1000) / num_entries)) >>"$trace_file"
done

# Enable IP forwarding
sudo sysctl -w net.ipv4.ip_forward=1 1>/dev/null

# Execute the bandwidth test with specified parameters
mm-delay "$predelay" ./btl.sh "$pcap_file" "$postdelay" "$bdp" "$aqm" "$cca" "$url" "$output_dir"

# Stop the mm-delay command
sudo killall mm-delay 2>/dev/null

# +-------------------------------------+
# | Convert received .pcap to .csv file |
# +-------------------------------------+

echo "[run_test.sh] Converting received data to .csv format"

# Create separate traces for TCP and UDP traffic
# Note: -o "gui.column.format:\"Time\",\"%Aut\"" is ommitted as it causes an error
tshark -r "$pcap_file" -T fields \
    -e _ws.col.cls_time \
    -e frame.time_relative \
    -e tcp.time_relative \
    -e frame.number \
    -e frame.len \
    -e ip.src \
    -e tcp.srcport \
    -e ip.dst \
    -e tcp.dstport \
    -e tcp.len \
    -e tcp.seq \
    -e tcp.ack \
    -E header=y \
    -E separator=, \
    -E quote=d \
    -E occurrence=f >"$output_dir/$cca-$predelay-$postdelay-$bandwidth-$buffer_size-tcp.csv"

# Capture UDP traffic
tshark -r "$pcap_file" -Y "udp" -E header=y -E separator=, -E quote=d >"$output_dir/$cca-udp.csv"

# Delete PCAP file if the parameter is True
if [ "$delete_pcap_file" == "True" ]; then
    rm "$pcap_file"
fi

# Log the completion of the conversion
echo "[run_test.sh] Conversion completed: $cca-$predelay-$postdelay-$bandwidth-$buffer_size-tcp.csv and $cca-$predelay-$postdelay-$bandwidth-$buffer_size-udp.csv generated."

# Kill any remaining iperf, iperf3, tcpdump, and mm-delay processes
killall iperf iperf3 tcpdump mm-delay mm-link 2>/dev/null

# Completion message
echo "[run_test.sh] Test completed successfully."
